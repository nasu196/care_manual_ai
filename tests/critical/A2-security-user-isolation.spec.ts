import { test, expect, BrowserContext } from '@playwright/test';
import { LoginPage } from '../pages/LoginPage';
import { testUsers, testFiles } from '../fixtures/test-data';

test.describe('A2. „Çª„Ç≠„É•„É™„ÉÜ„Ç£Âü∫Êú¨Á¢∫Ë™ç üö®ÊúÄÈáçË¶Å', () => {
  let contextA: BrowserContext;
  let contextB: BrowserContext;

  test.beforeAll(async ({ browser }) => {
    // „É¶„Éº„Ç∂„ÉºÂàÜÈõ¢„ÉÜ„Çπ„Éà„ÅÆ„Åü„ÇÅ„ÄÅ2„Å§„ÅÆÁã¨Á´ã„Åó„Åü„Éñ„É©„Ç¶„Ç∂„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Çí‰ΩúÊàê
    contextA = await browser.newContext();
    contextB = await browser.newContext();
  });

  test.afterAll(async () => {
    await contextA?.close();
    await contextB?.close();
  });

  test('„É°„É¢„Éá„Éº„ÇøÂàÜÈõ¢Á¢∫Ë™ç ‚òÖ‚òÖ‚òÖËá¥ÂëΩÁöÑ', async () => {
    const pageA = await contextA.newPage();
    const pageB = await contextB.newPage();
    
    const loginPageA = new LoginPage(pageA);
    const loginPageB = new LoginPage(pageB);

    try {
      // „É¶„Éº„Ç∂„ÉºA„Åß„É≠„Ç∞„Ç§„É≥„Åó„Å¶„É°„É¢‰ΩúÊàê
      await loginPageA.login(testUsers.userA.email, testUsers.userA.password);
      await pageA.getByText('„É°„É¢„Çπ„Çø„Ç∏„Ç™').click();
      await pageA.getByRole('button', { name: 'Êñ∞Ë¶è„É°„É¢' }).click();
      
      const uniqueMemoTitle = `Ê•µÁßò„É°„É¢_${Date.now()}`;
      await pageA.getByRole('textbox', { name: '„Çø„Ç§„Éà„É´' }).fill(uniqueMemoTitle);
      await pageA.getByRole('textbox', { name: '„É°„É¢ÂÜÖÂÆπ' }).fill('„Åì„Çå„ÅØÊ©üÂØÜÊÉÖÂ†±„Åß„Åô');
      await pageA.getByRole('button', { name: '‰øùÂ≠ò' }).click();
      
      await expect(pageA.getByText('‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü')).toBeVisible();
      await expect(pageA.getByText(uniqueMemoTitle)).toBeVisible();

      // „É¶„Éº„Ç∂„ÉºB„Åß„É≠„Ç∞„Ç§„É≥
      await loginPageB.login(testUsers.userB.email, testUsers.userB.password);
      await pageB.getByText('„É°„É¢„Çπ„Çø„Ç∏„Ç™').click();

      // „É¶„Éº„Ç∂„ÉºA„ÅÆ„É°„É¢„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™çÔºà‚òÖ‚òÖ‚òÖËá¥ÂëΩÁöÑ„ÉÅ„Çß„ÉÉ„ÇØÔºâ
      await expect(pageB.getByText(uniqueMemoTitle)).not.toBeVisible();
      await expect(pageB.getByText('„Åì„Çå„ÅØÊ©üÂØÜÊÉÖÂ†±„Åß„Åô')).not.toBeVisible();
      
    } finally {
      await pageA.close();
      await pageB.close();
    }
  });

  test('„Éï„Ç°„Ç§„É´„Éá„Éº„ÇøÂàÜÈõ¢Á¢∫Ë™ç ‚òÖ‚òÖ‚òÖËá¥ÂëΩÁöÑ', async () => {
    const pageA = await contextA.newPage();
    const pageB = await contextB.newPage();
    
    const loginPageA = new LoginPage(pageA);
    const loginPageB = new LoginPage(pageB);

    try {
      // „É¶„Éº„Ç∂„ÉºA„Åß„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
      await loginPageA.login(testUsers.userA.email, testUsers.userA.password);
      await pageA.getByText('ÂèÇÁÖßÂÖÉ„ÅÆÁÆ°ÁêÜ').click();
      await pageA.getByRole('button', { name: '„Éï„Ç°„Ç§„É´ËøΩÂä†' }).click();
      
      // „Éï„Ç°„Ç§„É´Âêç„ÅØÂãïÁöÑ„Å´ÁîüÊàê
      await pageA.setInputFiles('input[type="file"]', testFiles.pdf.path);
      await expect(pageA.getByText('ÂÆå‰∫Ü')).toBeVisible({ timeout: 30000 });

      // „É¶„Éº„Ç∂„ÉºB„Åß„É≠„Ç∞„Ç§„É≥
      await loginPageB.login(testUsers.userB.email, testUsers.userB.password);
      await pageB.getByText('ÂèÇÁÖßÂÖÉ„ÅÆÁÆ°ÁêÜ').click();

      // „É¶„Éº„Ç∂„ÉºA„ÅÆ„Éï„Ç°„Ç§„É´„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™çÔºà‚òÖ‚òÖ‚òÖËá¥ÂëΩÁöÑ„ÉÅ„Çß„ÉÉ„ÇØÔºâ
      await expect(pageB.getByText(testFiles.pdf.name)).not.toBeVisible();
      
    } finally {
      await pageA.close();
      await pageB.close();
    }
  });

  test('AI„ÉÅ„É£„ÉÉ„ÉàÂ±•Ê≠¥ÂàÜÈõ¢Á¢∫Ë™ç ‚òÖ‚òÖ‚òÖËá¥ÂëΩÁöÑ', async () => {
    const pageA = await contextA.newPage();
    const pageB = await contextB.newPage();
    
    const loginPageA = new LoginPage(pageA);
    const loginPageB = new LoginPage(pageB);

    try {
      // „É¶„Éº„Ç∂„ÉºA„Åß„É≠„Ç∞„Ç§„É≥„Åó„Å¶AI„ÉÅ„É£„ÉÉ„ÉàÂÆüË°å
      await loginPageA.login(testUsers.userA.email, testUsers.userA.password);
      
      const secretQuestion = `Ê•µÁßòË≥™Âïè_${Date.now()}: Ê©üÂØÜÊÉÖÂ†±„Å´„Å§„ÅÑ„Å¶Êïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ`;
      const chatInput = pageA.getByRole('textbox', { name: '„ÉÅ„É£„ÉÉ„ÉàÂÖ•Âäõ' });
      await chatInput.fill(secretQuestion);
      await pageA.getByRole('button', { name: 'ÈÄÅ‰ø°' }).click();
      
      // AIÂõûÁ≠î„ÇíÂæÖÊ©ü
      await expect(pageA.getByText('AI:', { exact: false })).toBeVisible({ timeout: 15000 });

      // „É¶„Éº„Ç∂„ÉºB„Åß„É≠„Ç∞„Ç§„É≥
      await loginPageB.login(testUsers.userB.email, testUsers.userB.password);

      // „É¶„Éº„Ç∂„ÉºA„ÅÆ„ÉÅ„É£„ÉÉ„ÉàÂ±•Ê≠¥„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™çÔºà‚òÖ‚òÖ‚òÖËá¥ÂëΩÁöÑ„ÉÅ„Çß„ÉÉ„ÇØÔºâ
      await expect(pageB.getByText(secretQuestion)).not.toBeVisible();
      
    } finally {
      await pageA.close();
      await pageB.close();
    }
  });

  test('URLÁõ¥Êé•Êìç‰ΩúÈò≤Ê≠¢Á¢∫Ë™ç ‚òÖ‚òÖ‚òÖËá¥ÂëΩÁöÑ', async () => {
    const pageA = await contextA.newPage();
    const pageB = await contextB.newPage();
    
    const loginPageA = new LoginPage(pageA);
    const loginPageB = new LoginPage(pageB);

    try {
      // „É¶„Éº„Ç∂„ÉºA„Åß„É≠„Ç∞„Ç§„É≥„Åó„Å¶„É°„É¢‰ΩúÊàê
      await loginPageA.login(testUsers.userA.email, testUsers.userA.password);
      await pageA.getByText('„É°„É¢„Çπ„Çø„Ç∏„Ç™').click();
      await pageA.getByRole('button', { name: 'Êñ∞Ë¶è„É°„É¢' }).click();
      
      const secretMemoTitle = `Ê•µÁßò„É°„É¢URL_${Date.now()}`;
      await pageA.getByRole('textbox', { name: '„Çø„Ç§„Éà„É´' }).fill(secretMemoTitle);
      await pageA.getByRole('textbox', { name: '„É°„É¢ÂÜÖÂÆπ' }).fill('URLÁõ¥Êé•„Ç¢„ÇØ„Çª„Çπ„ÉÜ„Çπ„ÉàÁî®Ê©üÂØÜ„Éá„Éº„Çø');
      await pageA.getByRole('button', { name: '‰øùÂ≠ò' }).click();
      await expect(pageA.getByText('‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü')).toBeVisible();
      
      // „É°„É¢Ë©≥Á¥∞URL„ÇíÂèñÂæó
      await pageA.getByText(secretMemoTitle).click();
      const memoDetailUrl = pageA.url();

      // „É¶„Éº„Ç∂„ÉºB„Åß„É≠„Ç∞„Ç§„É≥
      await loginPageB.login(testUsers.userB.email, testUsers.userB.password);
      
      // „É¶„Éº„Ç∂„ÉºA„ÅÆ„É°„É¢Ë©≥Á¥∞URL„Å´Áõ¥Êé•„Ç¢„ÇØ„Çª„ÇπË©¶Ë°åÔºà‚òÖ‚òÖ‚òÖËá¥ÂëΩÁöÑ„ÉÅ„Çß„ÉÉ„ÇØÔºâ
      await pageB.goto(memoDetailUrl);
      
      // „Ç¢„ÇØ„Çª„ÇπÊãíÂê¶„Åæ„Åü„ÅØ„Ç®„É©„Éº„Éö„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const isAccessDenied = await Promise.race([
        pageB.getByText('„Ç¢„ÇØ„Çª„Çπ„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü').isVisible().catch(() => false),
        pageB.getByText('403').isVisible().catch(() => false),
        pageB.getByText('Forbidden').isVisible().catch(() => false),
        pageB.getByText('Ê®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì').isVisible().catch(() => false),
        // „É°„É¢„ÅÆÂÜÖÂÆπ„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
        pageB.getByText('URLÁõ¥Êé•„Ç¢„ÇØ„Çª„Çπ„ÉÜ„Çπ„ÉàÁî®Ê©üÂØÜ„Éá„Éº„Çø').isVisible().then(() => false).catch(() => true)
      ]);
      
      expect(isAccessDenied).toBeTruthy();
      
    } finally {
      await pageA.close();
      await pageB.close();
    }
  });

  test('APIË™çË®ºÁ¢∫Ë™ç', async () => {
    const page = await contextA.newPage();
    const loginPage = new LoginPage(page);

    try {
      // DevTools„Åß„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Çø„Éñ„ÇíÁõ£Ë¶ñÈñãÂßã
      const requests: Array<{
        url: string;
        headers: Record<string, string>;
        method: string;
      }> = [];
      page.on('request', (request) => {
        if (request.url().includes('/api/') || request.url().includes('/rest/')) {
          requests.push({
            url: request.url(),
            headers: request.headers(),
            method: request.method()
          });
        }
      });

      await loginPage.login(testUsers.userA.email, testUsers.userA.password);
      
      // API„É™„ÇØ„Ç®„Çπ„Éà„ÇíÁô∫Áîü„Åï„Åõ„ÇãÊìç‰Ωú
      await page.getByText('ÂèÇÁÖßÂÖÉ„ÅÆÁÆ°ÁêÜ').click();
      
      // Â∞ë„ÅóÂæÖÊ©ü„Åó„Å¶„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂèéÈõÜ
      await page.waitForTimeout(2000);

      // API„É™„ÇØ„Ç®„Çπ„Éà„Å´Ê≠£„Åó„ÅÑAuthorization„Éò„ÉÉ„ÉÄ„Éº„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const apiRequests = requests.filter(req => 
        req.url.includes('/api/') || 
        req.url.includes('/rest/') ||
        req.url.includes('/functions/')
      );

      expect(apiRequests.length).toBeGreaterThan(0);
      
      // Â∞ë„Å™„Åè„Å®„ÇÇ1„Å§„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà„Å´Authorization„Éò„ÉÉ„ÉÄ„Éº„Åå„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const hasAuthHeader = apiRequests.some(req => 
        req.headers['authorization'] || req.headers['Authorization']
      );
      expect(hasAuthHeader).toBeTruthy();

      // service_role_key„ÅåÊºèÊ¥©„Åó„Å¶„ÅÑ„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™çÔºà‚òÖ‚òÖ‚òÖËá¥ÂëΩÁöÑ„ÉÅ„Çß„ÉÉ„ÇØÔºâ
      const hasServiceRoleKey = apiRequests.some(req => {
        const authHeader = req.headers['authorization'] || req.headers['Authorization'] || '';
        return authHeader.includes('service_role') || authHeader.includes('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9');
      });
      expect(hasServiceRoleKey).toBeFalsy();
      
    } finally {
      await page.close();
    }
  });
}); 